<?php

/**
 * @file
 *
 * Create a better login system
 */

 /**
* Implementation of hook_menu
*/
function super_login_menu() {    
  $items['admin/config/user-interface/super-login'] = array(
          'title' => t('Super Login'),
          'description' => t('Configure improvements to the Drupal login page.'),
          'file' => 'super_login.admin.inc',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('super_login_admin_form'),          
          'access arguments' => array('administer super login'),
    );                
    return $items;
} 

function super_login_permission(){
  return array(
    'administer super login' => array(
      'title' => t('Administer super login'),
      'description' => t('Perform administration tasks for the Super Login module.'),
    ),
  );  
}

 /**
 * Implementation of hook_form_alter().
 *
 * Autofocus on the username field.
 * TODO:// notes...
 */
function super_login_form_alter(&$form, &$form_state, $form_id) {  
  if ($form_id == 'user_login' || $form_id == 'user_register_form' || $form_id == 'user_pass' || $form_id == 'user_pass_reset') {
    // Set auto-focus and remove descriptions      
    $form['name']['#attributes']['autofocus'] = 'autofocus';    
    unset($form['name']['#description']);
    unset($form['pass']['#description']);
    $path = drupal_get_path('module', 'super_login');
  }  
  
  switch ($form_id) {
    case 'user_login':            
      
      if (variable_get('super_login_css', 1)){
        $form['#attached']['css'][] = $path .'/css/super-login.css';
      }
      
      $form['#attached']['js'][] = $path . '/js/super-login.js';

      $form['title'] = array(
        '#markup' => '<p class="login-title">' . t('Log In') . '</p>',
        '#weight' => -100,        
      );      
      
      $link = l(t('Forgot Password?'), 'user/password', array('attributes' => array('title' => t('Get a new password'))));
      $form['reset'] = array(
        '#markup' => '<p class="forgot-password">' . $link . '</p>',
        '#weight' => 1,        
      );
      $form['capslock'] = array(
        '#markup' => '<div id="capslockdiv"><p style="display: none;">' .  t('Caps Lock On') . '</p></div>',
        '#weight' => 2,        
      );
       
      if (user_register_access()):
        $actions_suffix = '<div class="actions-suffix">';    
        $actions_suffix .= l(t('Create new account'), 'user/register', array('attributes' => array('class' => 'super-login-register', 'title' => t('Create a new user account'))));
        $actions_suffix .= '</div>';
        $form['actions']['#suffix'] = $actions_suffix;
      endif;      
      
      $form['name']['#title'] = t('Username or e-mail address');
      $form['name']['#size'] = 50;
      $form['pass']['#size'] = 50;      
      
      // Set form placeholder text
      $form['name']['#attributes']['title'] = $form['name']['#title'];
      $form['name']['#attributes']['placeholder'] = $form['name']['#title'];
      $form['pass']['#attributes']['title'] = $form['pass']['#title'];
      $form['pass']['#attributes']['placeholder'] = $form['pass']['#title'];
      
      // If logintoboggan is installed and email login email is enabled then skip our own email login modification
      if (!module_exists('logintoboggan') && !variable_get('logintoboggan_login_with_email', 0)){
        // Ensure a valid validate array to allow login with e-mail address.
        $form['#validate'] = is_array($form['#validate']) ? $form['#validate'] : array();
        // LT's validation function must run first.
        array_unshift($form['#validate'],'super_login_user_login_validate');  
      }
      break;

    case 'user_register_form':      
      $form['account']['name']['#attributes']['autofocus'] = 'autofocus';
      break;

    case 'user_pass':      
      $form['#attached']['js'][] = $path . '/js/super-login-pw.js';
      
      $form['title'] = array(
        '#markup' => '<p class="login-title">' . t('Password Reset') . '</p>',
        '#weight' => -100,        
      );    
      $link = l(t('Back to login page'), 'user/login', array('attributes' => array('title' => t('Go back to the login page.'))));
      $form['reset'] = array(
        '#markup' => '<p class="back-to-login">' . $link . '</p>',
        '#weight' => 1,        
      ); 
      if (variable_get('super_login_css', 1)){
        $form['#attached']['css'][] = $path .'/css/super-login.css';
      }
      break;
  }
}


function super_login_form_user_pass_alter(&$form, &$form_state, $form_id) {  
  $form['name']['#attributes']['title'] = $form['name']['#title'];
  $form['name']['#attributes']['placeholder'] = $form['name']['#title'];
}


/**
 * Custom validation for user login form
 *
*/
function super_login_user_login_validate($form, &$form_state) {
  if (isset($form_state['values']['name']) && $form_state['values']['name']) {
    if ($name = db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:name)", array(
      ':name' => $form_state['values']['name'],
    ))->fetchField()) {
      form_set_value($form['name'], $name, $form_state);
    }
  }
}

// Remove tabs from login/password pages
function super_login_menu_alter(&$items) {  
  $items['user/register']['type'] = MENU_CALLBACK;
  $items['user/login']['type'] = MENU_CALLBACK;
  $items['user/password']['type'] = MENU_CALLBACK;  
}